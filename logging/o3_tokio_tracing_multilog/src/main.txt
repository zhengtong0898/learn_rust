use std::io;
use tracing::info;
use tracing_appender::non_blocking::NonBlocking;
use tracing_appender::rolling::{self, RollingFileAppender};
use tracing_subscriber::prelude::*;
use tracing_subscriber::{
    fmt::layer, fmt::time::ChronoLocal, fmt::writer::MakeWriter, EnvFilter, Registry,
};

#[derive(Clone)]
struct MyNonBlocking {
    inner: NonBlocking,
}

impl std::io::Write for MyNonBlocking {
    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
        self.inner.write(buf)
    }

    fn flush(&mut self) -> io::Result<()> {
        self.inner.flush()
    }

    #[inline]
    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
        self.inner.write(buf).map(|_| ())
    }
}

impl MakeWriter for MyNonBlocking {
    type Writer = MyNonBlocking;

    fn make_writer(&self) -> Self::Writer {
        self.clone()
    }
}

fn main() {
    let main_appender = RollingFileAppender::new(rolling::Rotation::DAILY, "logs/", "main");
    let (main_non_blocking, _main_guard) = tracing_appender::non_blocking(main_appender);
    let main_non_blocking = MyNonBlocking {
        inner: main_non_blocking,
    };
    let main_layer = layer()
        .with_writer(main_non_blocking)
        .with_timer(ChronoLocal::with_format("%Y-%m-%d %H:%M:%S.%f".to_string()))
        .with_ansi(false)
        .and_then(EnvFilter::new("info"));

    let console_appender = RollingFileAppender::new(rolling::Rotation::DAILY, "logs/", "console");
    let (console_non_blocking, _console_guard) = tracing_appender::non_blocking(console_appender);
    let console_non_blocking = MyNonBlocking {
        inner: console_non_blocking,
    };
    let console_layer = layer()
        .with_writer(console_non_blocking)
        .with_timer(ChronoLocal::with_format("%Y-%m-%d %H:%M:%S.%f".to_string()))
        .with_ansi(false)
        .and_then(EnvFilter::new("info"));

    Registry::default()
        .with(main_layer)
        .with(console_layer)
        .init();

    // 发送日志消息
    info!(target: "main", "This log message is for business A");
    info!(target: "console", "This log message is for business B");
}
